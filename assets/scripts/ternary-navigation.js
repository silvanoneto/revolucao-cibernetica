/**
 * ============================================
 * SISTEMA DE NAVEGA√á√ÉO TERN√ÅRIA
 * Revolu√ß√£o Cibern√©tica - Ontologia Execut√°vel
 * ============================================
 * 
 * Gerencia transi√ß√£o entre 3 camadas de conte√∫do:
 * -1 (Passado) | 0 (Presente) | +1 (Futuro)
 * 
 * Este sistema performa a temporalidade tern√°ria:
 * O presente n√£o √© um ponto - √© a TENS√ÉO entre extremos.
 */

// Estado global
let currentLayer = 0; // -1 (passado), 0 (presente), +1 (futuro)
let isTransitioning = false; // Controle de bloqueio durante transi√ß√µes

/**
 * Mudar camada ativa
 * @param {number} newLayer - Nova camada (-1, 0, ou +1)
 */
function switchLayer(newLayer) {
    // Bloquear se j√° est√° em transi√ß√£o
    if (isTransitioning) {
        console.warn('‚è∏Ô∏è Transi√ß√£o em andamento - clique bloqueado');
        return;
    }
    
    // Validar
    if (newLayer < -1 || newLayer > 1) {
        console.error('‚ùå Layer inv√°lida:', newLayer);
        return;
    }
    
    // Se j√° est√° na camada solicitada, ignorar
    if (newLayer === currentLayer) {
        console.log('‚úã J√° est√° na camada', newLayer);
        return;
    }
    
    // Ativar bloqueio
    isTransitioning = true;
    showTransitionOverlay();
    console.log(`üîÑ Mudando camada: ${currentLayer} ‚Üí ${newLayer}`);
    
    // Ocultar camada atual
    const currentSection = document.querySelector(`.layer[data-ternary="${currentLayer}"]`);
    if (currentSection) {
        currentSection.style.display = 'none';
        currentSection.style.visibility = 'hidden';
        currentSection.classList.remove('active');
        console.log(`üëª Ocultando camada ${currentLayer}`);
    }
    
    // Mostrar nova camada
    const newSection = document.querySelector(`.layer[data-ternary="${newLayer}"]`);
    if (newSection) {
        newSection.style.display = 'block';
        newSection.style.visibility = 'visible';
        newSection.style.opacity = '1';
        newSection.classList.add('active');
        console.log(`‚ú® Mostrando camada ${newLayer}`);
        
        // Scroll suave para o topo
        window.scrollTo({ top: 0, behavior: 'smooth' });
    } else {
        console.error(`‚ùå Se√ß√£o n√£o encontrada para camada ${newLayer}`);
    }
    
    // Atualizar bot√µes
    document.querySelectorAll('.guaiamum-nav button').forEach(btn => {
        const state = parseInt(btn.dataset.state);
        if (state === newLayer) {
            btn.classList.add('active');
            btn.setAttribute('aria-pressed', 'true');
        } else {
            btn.classList.remove('active');
            btn.setAttribute('aria-pressed', 'false');
        }
    });
    
    // Atualizar estado do body
    document.body.dataset.currentState = newLayer;
    currentLayer = newLayer;
    
    // Sincronizar canvas com camada temporal
    syncCanvasWithLayer(newLayer);
    
    // Atualizar hash da URL
    const hashMap = { '-1': '#past', '0': '#present', '1': '#future' };
    history.pushState(null, '', hashMap[newLayer]);
    
    console.log(`‚úÖ Camada tern√°ria ativa: ${newLayer}`);
    
    // Desbloquear ap√≥s anima√ß√£o (800ms para transi√ß√£o visual completar)
    setTimeout(() => {
        isTransitioning = false;
        hideTransitionOverlay();
        console.log('üîì Transi√ß√£o conclu√≠da - cliques desbloqueados');
    }, 800);
}

/**
 * Mostrar overlay de bloqueio durante transi√ß√£o
 */
function showTransitionOverlay() {
    let overlay = document.getElementById('ternary-transition-overlay');
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'ternary-transition-overlay';
        overlay.className = 'ternary-transition-overlay';
        document.body.appendChild(overlay);
    }
    overlay.classList.add('active');
}

/**
 * Ocultar overlay de bloqueio
 */
function hideTransitionOverlay() {
    const overlay = document.getElementById('ternary-transition-overlay');
    if (overlay) {
        overlay.classList.remove('active');
    }
}

/**
 * Sincronizar canvas com camada temporal
 * Ajusta anima√ß√£o, velocidade e cor do canvas baseado na camada ativa
 * @param {number} layer - Camada atual (-1, 0, ou +1)
 */
function syncCanvasWithLayer(layer) {
    console.log(`üé® Sincronizando canvas com camada ${layer}`);
    
    const canvas = document.getElementById('philosophy-canvas');
    if (!canvas) {
        console.warn('‚ö†Ô∏è Canvas n√£o encontrado para sincroniza√ß√£o');
        return;
    }
    
    // Atualizar opacidade baseado na camada
    const opacityMap = {
        '-1': '0.35', // Passado: mais vis√≠vel (mem√≥ria)
        '0': '0.25',  // Presente: padr√£o
        '1': '0.20'   // Futuro: mais sutil (incerteza)
    };
    
    canvas.style.opacity = opacityMap[layer] || '0.25';
    canvas.style.transition = 'opacity 0.8s ease';
    
    // Sincronizar com sphericalView se dispon√≠vel
    if (typeof sphericalView !== 'undefined' && sphericalView) {
        sphericalView.targetBlend = layer;
        console.log(`üåê sphericalView.targetBlend = ${layer}`);
    }
    
    // Sincronizar velocidade das formas se dispon√≠vel
    if (typeof shapes !== 'undefined' && Array.isArray(shapes)) {
        shapes.forEach(shape => {
            // Passado: movimento mais lento (mem√≥ria √© est√°vel)
            // Presente: velocidade normal
            // Futuro: movimento mais r√°pido (incerteza √© din√¢mica)
            const speedMultiplier = layer === -1 ? 0.7 : (layer === 1 ? 1.3 : 1.0);
            
            if (shape.vx) shape.vx *= speedMultiplier;
            if (shape.vy) shape.vy *= speedMultiplier;
        });
        console.log(`‚ö° Velocidade das formas ajustada: ${layer === -1 ? '70%' : (layer === 1 ? '130%' : '100%')}`);
    }
    
    // Ajustar filtro de cor do canvas via CSS
    const filterMap = {
        '-1': 'hue-rotate(-10deg) saturate(0.9)', // Passado: tons avermelhados
        '0': 'none',                                // Presente: normal
        '1': 'hue-rotate(10deg) saturate(1.1)'    // Futuro: tons azulados
    };
    
    canvas.style.filter = filterMap[layer] || 'none';
    
    console.log(`‚úÖ Canvas sincronizado com camada ${layer}`);
}

/**
 * Demonstrar Insight #1: Ontologia Execut√°vel
 * "N√£o representamos a realidade relacional - SOMOS a realidade relacional em execu√ß√£o."
 */
function demonstrateOntology() {
    console.log('üé≠ Demonstra√ß√£o: Ontologia Execut√°vel');
    
    alert(
        'üé≠ Demonstra√ß√£o: Ontologia Execut√°vel\n\n' +
        'Observe o canvas ao fundo:\n\n' +
        '‚Ä¢ Cada forma n√£o tem "ess√™ncia" fixa\n' +
        '‚Ä¢ Sua identidade emerge das RELA√á√ïES:\n' +
        '  ‚ó¶ Posi√ß√£o no espectro do caos (-1 a +1)\n' +
        '  ‚ó¶ Velocidade relativa\n' +
        '  ‚ó¶ Intera√ß√µes com outras formas\n\n' +
        'Isso √© ontologia EXECUT√ÅVEL - n√£o representa√ß√£o!\n' +
        'O canvas vai ficar mais vis√≠vel por 3 segundos...'
    );
    
    // Destacar canvas temporariamente
    const canvas = document.getElementById('philosophy-canvas');
    if (canvas) {
        const originalOpacity = canvas.style.opacity || '0.25';
        canvas.style.opacity = '0.8';
        canvas.style.transition = 'opacity 0.5s ease';
        
        console.log('‚ú® Canvas destacado');
        
        setTimeout(() => {
            canvas.style.opacity = originalOpacity;
            console.log('üëª Canvas voltou ao normal');
        }, 3000);
    } else {
        console.warn('‚ö†Ô∏è Canvas n√£o encontrado');
    }
}

/**
 * Demonstrar Insight #2: Temporalidade Tern√°ria
 * "O presente n√£o √© um ponto entre passado e futuro - √© a tens√£o din√¢mica onde ambos coexistem."
 */
function demonstrateTemporality() {
    console.log('‚è≥ Demonstra√ß√£o: Temporalidade Tern√°ria');
    
    alert(
        '‚è≥ Demonstra√ß√£o: Temporalidade Tern√°ria\n\n' +
        'Use os bot√µes Guaiamum no topo:\n\n' +
        'ü¶Ä ‚¨ÜÔ∏è  Passado (-1)\n' +
        '  ‚Üí Genealogia intelectual\n' +
        '  ‚Üí Ra√≠zes do projeto\n\n' +
        '‚òØÔ∏è  Presente (0)\n' +
        '  ‚Üí Manifesto (voc√™ est√° aqui)\n' +
        '  ‚Üí Tens√£o entre extremos\n\n' +
        'ü¶Ä ‚¨áÔ∏è  Futuro (+1)\n' +
        '  ‚Üí Pr√≥ximas expans√µes\n' +
        '  ‚Üí Possibilidades abertas\n\n' +
        'O presente n√£o √© um ponto - √© a TENS√ÉO!\n' +
        'Observe os bot√µes piscando...'
    );
    
    // Piscar bot√µes sequencialmente
    const buttons = document.querySelectorAll('.guaiamum-nav button');
    buttons.forEach((btn, i) => {
        setTimeout(() => {
            btn.style.transform = 'scale(1.2)';
            btn.style.transition = 'transform 0.3s ease';
            
            setTimeout(() => {
                btn.style.transform = '';
            }, 300);
        }, i * 400);
    });
    
    console.log('‚ú® Anima√ß√£o de temporalidade executada');
}

/**
 * Demonstrar Insight #3: Cr√≠tica Performativa
 * "A melhor cr√≠tica da automa√ß√£o √© um sistema que celebra o caos humano."
 */
function demonstrateCritique() {
    console.log('ü§ñ Demonstra√ß√£o: Cr√≠tica Performativa');
    
    const response = confirm(
        'ü§ñ Demonstra√ß√£o: Cr√≠tica Performativa\n\n' +
        'Este site tem um CAPTCHA anti-algor√≠tmico:\n\n' +
        '‚úÖ HUMANOS passam facilmente\n' +
        '  ‚Üí Reconhecemos caos intuitivamente\n' +
        '  ‚Üí N√£o seguimos padr√µes previs√≠veis\n\n' +
        '‚ùå BOTS falham consistentemente\n' +
        '  ‚Üí Movimento ca√≥tico √© imprevis√≠vel\n' +
        '  ‚Üí Extremos do espectro confundem ML\n\n' +
        'Isso √© cr√≠tica PERFORMATIVA:\n' +
        'O sistema executa sua pr√≥pria filosofia!\n\n' +
        'Quer testar o CAPTCHA agora?'
    );
    
    if (response) {
        console.log('üöÄ Redirecionando para p√°gina de download...');
        window.location.href = 'download.html';
    } else {
        console.log('üëç Usu√°rio optou por n√£o testar agora');
    }
}

/**
 * Inicializar canvas background
 * Reutiliza a l√≥gica do captcha.js sem interatividade
 */
function initializePhilosophyCanvas() {
    const canvas = document.getElementById('philosophy-canvas');
    if (!canvas) {
        console.warn('‚ö†Ô∏è Canvas #philosophy-canvas n√£o encontrado');
        return;
    }
    
    console.log('üé® Inicializando canvas filos√≥fico...');
    
    // Configurar dimens√µes
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.error('‚ùå N√£o foi poss√≠vel obter contexto 2d do canvas');
        return;
    }
    
    // Detectar mobile
    const isMobile = window.innerWidth <= 768;
    const shapeCount = isMobile ? 5 : 8;
    
    // Criar formas simples (se captcha.js n√£o estiver dispon√≠vel)
    if (typeof shapes === 'undefined') {
        console.log('üì¶ Criando sistema de formas simplificado...');
        
        const simpleShapes = [];
        for (let i = 0; i < shapeCount; i++) {
            simpleShapes.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                vx: (Math.random() - 0.5) * 2,
                vy: (Math.random() - 0.5) * 2,
                size: 20 + Math.random() * 30,
                color: `hsl(${Math.random() * 360}, 70%, 60%)`,
                chaos: Math.random() * 2 - 1
            });
        }
        
        // Loop de anima√ß√£o simplificado
        function animate() {
            ctx.fillStyle = 'rgba(10, 10, 15, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            simpleShapes.forEach(shape => {
                // Atualizar posi√ß√£o
                shape.x += shape.vx;
                shape.y += shape.vy;
                
                // Bounce nas bordas
                if (shape.x < 0 || shape.x > canvas.width) shape.vx *= -1;
                if (shape.y < 0 || shape.y > canvas.height) shape.vy *= -1;
                
                // Desenhar
                ctx.fillStyle = shape.color;
                ctx.globalAlpha = 0.6;
                ctx.beginPath();
                ctx.arc(shape.x, shape.y, shape.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.globalAlpha = 1;
            });
            
            requestAnimationFrame(animate);
        }
        
        animate();
        console.log('‚úÖ Canvas simplificado iniciado');
    } else {
        console.log('‚úÖ Usando sistema completo do captcha.js');
    }
    
    // Redimensionar canvas ao mudar janela
    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });
}

/**
 * Inicializa√ß√£o do sistema
 */
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåÄ Inicializando Sistema de Navega√ß√£o Tern√°ria...');
    
    // Verificar se elementos essenciais existem
    const layersExist = document.querySelectorAll('.layer').length > 0;
    const buttonsExist = document.querySelectorAll('.guaiamum-nav button').length > 0;
    
    if (!layersExist) {
        console.error('‚ùå Nenhuma camada (.layer) encontrada!');
        return;
    }
    
    if (!buttonsExist) {
        console.error('‚ùå Nenhum bot√£o Guaiamum encontrado!');
        return;
    }
    
    // Vincular bot√µes Guaiamum
    document.querySelectorAll('.guaiamum-nav button').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const state = parseInt(e.currentTarget.dataset.state);
            if (!isNaN(state)) {
                switchLayer(state);
            } else {
                console.error('‚ùå Estado inv√°lido no bot√£o:', e.currentTarget);
            }
        });
        
        // Acessibilidade: suporte a teclado
        btn.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                e.currentTarget.click();
            }
        });
    });
    
    console.log('‚úÖ Bot√µes Guaiamum vinculados');
    
    // Verificar hash na URL
    const hash = window.location.hash;
    let initialLayer = 0;
    
    if (hash === '#past') {
        initialLayer = -1;
    } else if (hash === '#future') {
        initialLayer = 1;
    } else if (hash === '#present' || hash === '') {
        initialLayer = 0;
    }
    
    // Inicializar na camada apropriada
    switchLayer(initialLayer);
    
    // Inicializar canvas background
    setTimeout(() => {
        initializePhilosophyCanvas();
    }, 100);
    
    // Navega√ß√£o via teclas de seta (acessibilidade)
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft' && currentLayer > -1) {
            switchLayer(currentLayer - 1);
        } else if (e.key === 'ArrowRight' && currentLayer < 1) {
            switchLayer(currentLayer + 1);
        }
    });
    
    console.log('‚úÖ Navega√ß√£o por teclado habilitada');
    
    // Expor fun√ß√µes globalmente para uso em HTML
    window.switchLayer = switchLayer;
    window.demonstrateOntology = demonstrateOntology;
    window.demonstrateTemporality = demonstrateTemporality;
    window.demonstrateCritique = demonstrateCritique;
    
    console.log('üåÄ Sistema de navega√ß√£o tern√°ria inicializado com sucesso!');
    console.log(`üìç Camada inicial: ${initialLayer}`);
});

/**
 * Gerenciar navega√ß√£o do navegador (back/forward)
 */
window.addEventListener('popstate', () => {
    const hash = window.location.hash;
    let targetLayer = 0;
    
    if (hash === '#past') targetLayer = -1;
    else if (hash === '#future') targetLayer = 1;
    else targetLayer = 0;
    
    if (targetLayer !== currentLayer) {
        switchLayer(targetLayer);
    }
});

// Meta-observa√ß√£o: Log de performance
if (performance && performance.mark) {
    performance.mark('ternary-navigation-loaded');
    console.log('üìä Performance mark: ternary-navigation-loaded');
}
