/**
 * Service Worker para Revolu√ß√£o Cibern√©tica
 * Implementa estrat√©gia de cache para melhorar performance e permitir acesso offline
 */

const CACHE_NAME = 'revolucao-cibernetica-v1';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/manifesto.html',
  '/entry.html',
  '/download.html',
  '/assets/css/styles.css',
  '/assets/css/index-ternary.css',
  '/assets/css/download.css',
  '/assets/scripts/ternary-navigation.js',
  '/assets/scripts/rizoma-navigation.js',
  '/assets/scripts/captcha.js',
  '/assets/scripts/main.js',
  // Adicionar imagens cr√≠ticas
  '/assets/images/01_capa_revolucao_cibernetica.png',
  '/assets/images/favicon.ico'
];

// Instalar service worker e fazer cache inicial
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker: Instalando...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('üì¶ Service Worker: Cache aberto');
        return cache.addAll(ASSETS_TO_CACHE);
      })
      .then(() => {
        console.log('‚úÖ Service Worker: Assets em cache');
        return self.skipWaiting();
      })
  );
});

// Ativar service worker e limpar caches antigos
self.addEventListener('activate', (event) => {
  console.log('üöÄ Service Worker: Ativando...');
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames
            .filter((name) => name !== CACHE_NAME)
            .map((name) => {
              console.log('üóëÔ∏è Service Worker: Removendo cache antigo:', name);
              return caches.delete(name);
            })
        );
      })
      .then(() => {
        console.log('‚úÖ Service Worker: Ativado');
        return self.clients.claim();
      })
  );
});

// Estrat√©gia: Cache First, falling back to Network
// Ideal para assets est√°ticos que n√£o mudam frequentemente
self.addEventListener('fetch', (event) => {
  // Ignorar requisi√ß√µes n√£o-HTTP
  if (!event.request.url.startsWith('http')) {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        if (cachedResponse) {
          // Recurso encontrado no cache
          console.log('üì¶ Cache hit:', event.request.url);
          return cachedResponse;
        }

        // Recurso n√£o est√° no cache, buscar na rede
        console.log('üåê Cache miss, buscando na rede:', event.request.url);
        return fetch(event.request)
          .then((networkResponse) => {
            // Verificar se a resposta √© v√°lida
            if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
              return networkResponse;
            }

            // Clonar a resposta (s√≥ pode ser consumida uma vez)
            const responseToCache = networkResponse.clone();

            // Adicionar ao cache para uso futuro
            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(event.request, responseToCache);
              });

            return networkResponse;
          })
          .catch((error) => {
            console.error('‚ùå Erro ao buscar recurso:', error);
            // Aqui voc√™ pode retornar uma p√°gina offline customizada
            // return caches.match('/offline.html');
          });
      })
  );
});

// Sincroniza√ß√£o em background (opcional)
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-data') {
    console.log('üîÑ Service Worker: Sincronizando dados...');
    // Implementar l√≥gica de sincroniza√ß√£o aqui
  }
});

// Push notifications (opcional)
self.addEventListener('push', (event) => {
  console.log('üîî Service Worker: Notifica√ß√£o push recebida');
  const options = {
    body: event.data ? event.data.text() : 'Nova atualiza√ß√£o dispon√≠vel',
    icon: '/assets/images/favicon.ico',
    badge: '/assets/images/favicon.ico',
    vibrate: [200, 100, 200],
    tag: 'revolucao-cibernetica',
    requireInteraction: true
  };

  event.waitUntil(
    self.registration.showNotification('Revolu√ß√£o Cibern√©tica', options)
  );
});
